# Task ID: 1
# Title: Setup Supabase Backend Infrastructure
# Status: in-progress
# Dependencies: None
# Priority: high
# Description: Configure Supabase project with authentication, database tables, and storage buckets needed for the game
# Details:
Create a new Supabase project. Set up authentication with session/room join functionality (similar to Wooclap or Tricount). Create all database tables as defined in the PRD: games, teams, users, participants, visits, challenges, messages, and partner_bars (optional). Configure Row Level Security (RLS) policies for each table. Create storage buckets for challenge photos, team avatars, and visit validation photos with appropriate access rules. Enable Realtime features for newsfeed functionality and score updates.

# Test Strategy:
Verify each table schema matches the PRD specifications. Test RLS policies with different user roles (admin, chicken, hunter). Confirm storage buckets are created with proper permissions. Validate session/room joining authentication flow works with test users.

# Subtasks:
## 1. Create Supabase Project and Configure Authentication [pending]
### Dependencies: None
### Description: Initialize a new Supabase project and set up the authentication system with session/room joining functionality
### Details:
1. Create a new Supabase project in the dashboard
2. Configure the project settings with appropriate region and pricing plan
3. Set up authentication providers, implementing session/room joining functionality similar to Wooclap or Tricount
4. Configure email templates for session joining if needed
5. Test the authentication flow by joining a test session/room
6. Create initial authentication redirect pages in the frontend application
7. Store Supabase credentials securely for use in the application
8. Test the complete authentication flow from session join to successful authentication

## 2. Create Database Tables with RLS Policies [pending]
### Dependencies: 1.1
### Description: Set up all required database tables and implement Row Level Security policies for data protection
### Details:
1. Design and create the following tables with appropriate columns and relationships:
   - games (game sessions, rules, time periods)
   - teams (name, score, members, etc.)
   - users (profile information)
   - participants (linking users to teams/games)
   - visits (location check-ins)
   - challenges (tasks for teams to complete)
   - messages (for in-game communication)
   - partner_bars (optional, for special locations)
2. Define appropriate primary keys and foreign key relationships
3. Create indexes for frequently queried columns
4. Implement Row Level Security (RLS) policies for each table to restrict access based on user roles and ownership
5. Test RLS policies by attempting to access data with different user accounts
6. Document the database schema and RLS rules for future reference
7. Create database migration scripts for version control

## 3. Set Up Storage Buckets and Enable Realtime Features [pending]
### Dependencies: 1.1, 1.2
### Description: Configure storage for media files and enable Realtime functionality for live updates
### Details:
1. Create the following storage buckets in Supabase:
   - challenge_photos: for storing images of completed challenges
   - team_avatars: for team profile pictures
   - visit_photos: for location check-in validation
2. Configure appropriate access controls for each bucket using RLS policies
3. Set up file size limits and allowed file types for each bucket
4. Test file upload and retrieval functionality for each bucket
5. Enable Realtime features in the Supabase project settings
6. Configure Realtime subscriptions for:
   - Newsfeed updates (new challenges, visits, etc.)
   - Score updates for teams
   - Message notifications
7. Create test clients to verify Realtime functionality is working
8. Document the storage structure and Realtime configuration
9. Implement cleanup policies for storage (e.g., temporary files)

## 4. Create Supabase Project and Configure Authentication [pending]
### Dependencies: None
### Description: Set up a new Supabase project and configure the authentication system with session/room joining functionality
### Details:
1. Create a new Supabase project from the dashboard
2. Configure project settings including region and pricing plan
3. Set up authentication settings in the Auth section
4. Implement session/room joining functionality similar to Wooclap or Tricount
5. Configure any necessary email templates for session joining
6. Test the authentication flow by joining a test session/room
7. Store project URL and API keys securely for future use

Testing approach: Create a test session and verify users can join and authenticate successfully.

## 5. Create Database Tables and Configure RLS Policies [pending]
### Dependencies: 1.4
### Description: Set up all required database tables and implement Row Level Security policies for proper data access control
### Details:
1. Define and create the following tables with appropriate columns and relationships:
   - games (game_id, name, start_date, end_date, etc.)
   - teams (team_id, name, score, game_id, etc.)
   - users (user_id, email, name, etc.)
   - participants (participant_id, user_id, team_id, etc.)
   - visits (visit_id, team_id, location, timestamp, etc.)
   - challenges (challenge_id, game_id, description, points, etc.)
   - messages (message_id, sender_id, content, timestamp, etc.)
   - partner_bars (optional) (bar_id, name, location, etc.)
2. Set up foreign key relationships between tables
3. Create indexes for frequently queried columns
4. Configure Row Level Security (RLS) policies for each table:
   - Enable RLS on all tables
   - Define policies for read/write access based on user roles and team membership
   - Test policies with different user contexts

Testing approach: Write SQL queries to test table relationships and RLS policies by simulating different user roles and verifying proper access control.

## 6. Set Up Storage Buckets and Enable Realtime Features [pending]
### Dependencies: 1.4, 1.5
### Description: Configure storage buckets for media files and enable Realtime functionality for dynamic updates
### Details:
1. Create storage buckets for:
   - challenge_photos: for storing challenge submission photos
   - team_avatars: for team profile images
   - visit_validation: for photos validating team visits to locations
2. Configure access policies for each bucket:
   - Set appropriate public/private access rules
   - Configure CORS settings if needed
   - Set up bucket-specific RLS policies
3. Enable Realtime features in Supabase:
   - Configure publication/subscription settings for relevant tables
   - Enable Realtime for tables requiring live updates (messages, teams, visits)
   - Set up Realtime channels for newsfeed functionality
   - Configure Realtime for score updates
4. Test file uploads and Realtime functionality

Testing approach: Upload test files to each bucket and verify access controls. Test Realtime functionality by making changes to tables and confirming that updates are broadcast in real-time.

