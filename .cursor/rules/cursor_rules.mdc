---
description: Guidelines for creating and maintaining Cursor rules to ensure consistency and effectiveness.
globs: .cursor/rules/*.mdc
alwaysApply: true
---
---
description: Assure que les composants sont petits, focalisés et ont une seule responsabilité
globs: src/components/**/*.tsx, src/pages/**/*.tsx
alwaysApply: true
---

Décomposer les gros composants
Si un composant dépasse 200 lignes, refactorise-le en composants plus petits et réutilisables.

Chaque composant doit avoir une seule responsabilité (ex. : affichage, logique, interaction).

Exemple : Divise @UserProfile.tsx en UserInfo, UserStats, et UserActions.
typescript

// ✅ À FAIRE : Composant petit et focalisé
const UserInfo: React.FC<UserInfoProps> = ({ user }) => (
  <IonCard>
    <IonCardContent>{user.name}</IonCardContent>
  </IonCard>
);

// ❌ À ÉVITER : Composant monolithique
const UserProfile: React.FC = ({ user }) => (
  <IonCard>
    <IonCardContent>{user.name}</IonCardContent>
    <IonButton>Modifier</IonButton>
    <IonList>{/* Stats */}</IonList>
  </IonCard>
);

Utiliser des composants fonctionnels avec hooks
Privilégie les composants fonctionnels aux composants de classe, en utilisant des hooks comme useState.

Exemple :
typescript

// ✅ À FAIRE : Composant fonctionnel
const Counter: React.FC = () => {
  const [count, setCount] = useState(0);
  return <IonButton onClick={() => setCount(count + 1)}>{count}</IonButton>;
};

// ❌ À ÉVITER : Composant de classe
class Counter extends React.Component {
  state = { count: 0 };
  render() {
    return <IonButton>{this.state.count}</IonButton>;
  }
}

Typer les props avec TypeScript
Utilise des interfaces pour typer les props et garantir la sécurité des types.

Exemple :
typescript

interface UserInfoProps {
  user: { name: string; id: number };
}
const UserInfo: React.FC<UserInfoProps> = ({ user }) => (
  <div>{user.name}</div>
);

Règle 2 : Gestion de l'État

---
description: Utilise les techniques de gestion d'état adaptées à chaque scénario
globs: src/components/**/*.tsx, src/pages/**/*.tsx
alwaysApply: true
---

Utiliser l'état local pour les données spécifiques à un composant
Utilise useState pour les états limités à un seul composant.

Exemple :
typescript

const [isOpen, setIsOpen] = useState(false);

Utiliser l'API Context pour l'état global
Partage l'état entre plusieurs composants avec React Context, évitant le "prop drilling".

Exemple dans @UserContext.tsx :
typescript

export const UserContext = createContext<User | null>(null);

// Dans @App.tsx
<UserContext.Provider value={user}>
  <IonApp>{children}</IonApp>
</UserContext.Provider>

Extraire la logique dans des hooks personnalisés
Crée des hooks réutilisables comme useUserData pour la logique avec état.

Exemple :
typescript

// @useUserData.ts
export const useUserData = () => {
  const [user, setUser] = useState<User | null>(null);
  return { user, setUser };
};

Règle 3 : Navigation et Routage

---
description: Utilise correctement les composants et patterns de navigation Ionic
globs: src/pages/**/*.tsx, src/App.tsx
alwaysApply: true
---

Utiliser IonPage pour les composants de page
Enveloppe chaque page dans IonPage pour un style Ionic correct.

Exemple dans @HomePage.tsx :
typescript

const HomePage: React.FC = () => (
  <IonPage>
    <IonHeader><IonToolbar><IonTitle>Accueil</IonTitle></IonToolbar></IonHeader>
    <IonContent>Contenu Accueil</IonContent>
  </IonPage>
);

Utiliser IonRouterOutlet pour le routage
Définis les routes dans @App.tsx avec IonRouterOutlet.

Exemple :
typescript

import { IonReactRouter } from '@ionic/react-router';
import { IonRouterOutlet } from '@ionic/react';

const App: React.FC = () => (
  <IonReactRouter>
    <IonRouterOutlet>
      <Route path="/home" component={HomePage} exact />
    </IonRouterOutlet>
  </IonReactRouter>
);

Exploiter les hooks de navigation Ionic
Utilise useIonRouter pour naviguer.

Exemple :
typescript

import { useIonRouter } from '@ionic/react';
const router = useIonRouter();
router.push('/page-suivante');

Règle 4 : Style et Thèmes

---
description: Suis les guidelines de style Ionic et utilise les variables CSS pour les thèmes
globs: src/**/*.css, src/**/*.scss, src/components/**/*.tsx, src/pages/**/*.tsx
alwaysApply: true
---

Utiliser les utilitaires CSS Ionic
Applique des classes comme ion-padding pour un espacement cohérent.

Exemple :
css

.ion-padding {
  padding: 16px;
}

Utiliser des variables CSS pour les thèmes
Personnalise les thèmes Ionic dans @theme/variables.css.

Exemple :
css

:root {
  --ion-color-primary: #ff4081;
  --ion-color-primary-contrast: #ffffff;
}

Éviter les styles en ligne
Privilégie les classes CSS aux styles inline pour la maintenabilité.

Exemple :
typescript

// ✅ À FAIRE : Classe CSS
<IonButton className="custom-button">Clique</IonButton>

// ❌ À ÉVITER : Style inline
<IonButton style={{ color: 'blue' }}>Clique</IonButton>

Règle 5 : Optimisation des Performances

---
description: Implémente des techniques pour améliorer les performances de l'application
globs: src/components/**/*.tsx, src/pages/**/*.tsx
alwaysApply: true
---

Utiliser React.memo pour les composants purs
Évite les re-rendus inutiles avec React.memo.

Exemple :
typescript

const StaticComponent = React.memo(() => <IonLabel>Statique</IonLabel>);

Utiliser useCallback pour les callbacks
Mémorise les fonctions pour éviter leur re-création.

Exemple :
typescript

const handleClick = useCallback(() => console.log('Cliqué'), []);

Implémenter le chargement différé
Utilise React.lazy pour diviser le code par route.

Exemple dans @App.tsx :
typescript

const LazyPage = React.lazy(() => import('./pages/LazyPage'));
<Suspense fallback={<IonSpinner />}>
  <LazyPage />
</Suspense>

Règle 6 : Accessibilité

---
description: Assure que l'application est accessible à tous les utilisateurs
globs: src/components/**/*.tsx, src/pages/**/*.tsx
alwaysApply: true
---

Utiliser du HTML sémantique
Utilise <button> pour les boutons, pas <div> avec onClick.

Exemple :
typescript

// ✅ À FAIRE
<button>Soumettre</button>
// ❌ À ÉVITER
<div onClick={handleClick}>Soumettre</div>

Fournir un texte alternatif pour les images
Ajoute des attributs alt aux balises <img>.

Exemple :
typescript

<img src="logo.png" alt="Logo de l'application" />

Assurer l'accessibilité au clavier
Vérifie que tous les éléments interactifs sont accessibles avec Tab.

Règle 7 : Tests

---
description: Écris des tests pour les composants et fonctionnalités
globs: src/**/*.test.tsx
alwaysApply: true
---

Écrire des tests unitaires
Utilise Jest et React Testing Library.

Exemple :
typescript

test('affiche le bouton', () => {
  render(<IonButton>Clique</IonButton>);
  expect(screen.getByText('Clique')).toBeInTheDocument();
});

Simuler les appels API
Utilise des mocks pour les dépendances externes.

Exemple :
typescript

jest.mock('axios');
axios.get.mockResolvedValue({ data: mockData });

Directives de Maintenance des Règles
Mettre à jour régulièrement : Adapte les règles aux évolutions d’Ionic React (nouveaux hooks, composants).

Ajouter des exemples réels : Référence ton code (ex. @HomePage.tsx) au fur et à mesure.

Supprimer les patterns obsolètes : Retire les règles comme les composants de classe si inutiles.

Référencer les règles liées : Par exemple, lie "Gestion de l'État" aux "Hooks Personnalisés".


- **Required Rule Structure:**
  ```markdown
  ---
  description: Clear, one-line description of what the rule enforces
  globs: path/to/files/*.ext, other/path/**/*
  alwaysApply: boolean
  ---

  - **Main Points in Bold**
    - Sub-points with details
    - Examples and explanations
  ```

- **File References:**
  - Use `[filename](mdc:path/to/file)` ([filename](mdc:filename)) to reference files
  - Example: [prisma.mdc](mdc:.cursor/rules/prisma.mdc) for rule references
  - Example: [schema.prisma](mdc:prisma/schema.prisma) for code references

- **Code Examples:**
  - Use language-specific code blocks
  ```typescript
  // ✅ DO: Show good examples
  const goodExample = true;
  
  // ❌ DON'T: Show anti-patterns
  const badExample = false;
  ```

- **Rule Content Guidelines:**
  - Start with high-level overview
  - Include specific, actionable requirements
  - Show examples of correct implementation
  - Reference existing code when possible
  - Keep rules DRY by referencing other rules
  - **Refactoring Large Files:**
    - If a file exceeds 200 lines, consider refactoring it.
    - Apply best practices for modern web development, specifically focusing on Ionic React patterns:
      - **Component Decomposition**: Break large components into smaller, focused components with single responsibilities
      - **Custom Hooks**: Extract stateful logic into reusable custom hooks (`useMyFeature`)
      - **Context API**: Use React Context for state that needs to be accessed by many components instead of prop drilling
      - **Lazy Loading**: Implement route-based code splitting with React.lazy() and Suspense
      - **Proper Ionic Components**: Use IonPage as root for all page components and follow Ionic component hierarchy (IonPage > IonHeader/IonContent)
      - **Functional Components**: Prefer functional components with hooks over class components
      - **Typed Props**: Use TypeScript interfaces for component props (React.FC<MyProps>)
      - **Memoization**: Use React.memo() and useCallback() for performance optimization
      - **Ionic Navigation**: Leverage IonRouterOutlet for navigation with proper history management
      - **Slots Pattern**: Use slot attributes to position elements within Ionic components
      - **Ionic Lifecycle**: Use ionViewWillEnter and similar lifecycle events via useIonViewDidEnter hook
      - **Gesture Handling**: Use Ionic's gesture system for advanced touch interactions
      - **Form Controls**: Prefer Ionic form components with React-compatible controlled component pattern
      - **Styling Best Practices**: Use Ionic CSS utilities (padding, margin, flex) and CSS variables for theming
    - Aim for smaller, reusable components and hooks to improve maintainability and readability.

- **Rule Maintenance:**
  - Update rules when new patterns emerge
  - Add examples from actual codebase
  - Remove outdated patterns
  - Cross-reference related rules

- **Best Practices:**
  - Use bullet points for clarity
  - Keep descriptions concise
  - Include both DO and DON'T examples
  - Reference actual code over theoretical examples
  - Use consistent formatting across rules 